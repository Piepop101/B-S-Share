using System;
using System.Collections;
using ThunderRoad;
using UnityEngine;

namespace AutoImbue
{
    // ReSharper disable once UnusedType.Global
    public class Imbue : ItemModule
    {
        public string spellID;
        // ReSharper disable once ParameterHidesMember
        public override void OnItemLoaded(Item item)
        {
            base.OnItemLoaded(item);
            item.gameObject.AddComponent<ItemAutoImbue>();
        }
    }
    // ReSharper disable once InconsistentNaming
    public class ItemAutoImbue : MonoBehaviour
    {
        private Item _item;
        private Imbue _module;
        private bool _isBeingImbued;

        private void Start()
        {
            try
            {
                Debug.Log("auto imbue start");
                _item = GetComponent<Item>();
                _module = _item.data.GetModule<Imbue>();
                _item.OnHeldActionEvent += ItemOnOnHeldActionEvent;
            }
            catch (Exception exception)
            {
                Debug.Log("item auto imbue exception");
                Debug.Log(exception.Message);
            }
        }

        private IEnumerator AutoImbue()
        {
            _isBeingImbued = true;
            var spellCastCharge = Catalog.GetData<SpellCastCharge>(_module.spellID);

            while (_item.imbues.Count == 0)
            {
                yield return new WaitForFixedUpdate();
            }

            foreach (var imbue in _item.imbues)
            {
                imbue.Transfer(spellCastCharge, imbue.maxEnergy * 100);
                imbue.colliderGroup.modifier.imbueConstantLoss = 0;
                imbue.colliderGroup.modifier.imbueHitLoss = 0;
            }

            _isBeingImbued = false;
            yield return null;
        }

        private void ItemOnOnHeldActionEvent(RagdollHand ragdollhand, Handle handle, Interactable.Action action)
        {
            if (action == Interactable.Action.AlternateUseStart)
            {
                try
                {
                    if (_item.imbues[0].energy >= _item.imbues[0].maxEnergy && !_isBeingImbued)
                    {
                        //disable imbue
                        foreach (var imbue in _item.imbues)
                        {
                            imbue.energy = 0;
                        }
                    }
                    else
                    {
                        StartCoroutine(AutoImbue());
                    }
                }
                catch (Exception exception)
                {
                    Debug.Log(exception.Message);
                }
            }
        }
    }
}
